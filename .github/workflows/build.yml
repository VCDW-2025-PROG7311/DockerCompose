name: Docker Compose Build, Init, and Security Pipeline

on:
  push:
    branches: [ "sql" ]
  pull_request:
    branches: [ "sql" ]

jobs:
  build-and-secure:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.5
        options: --privileged

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install docker-compose -y

    - name: Create .env file
      run: |
        echo "DB_SA_PASSWORD=${{ secrets.DB_SA_PASSWORD }}" >> .env
        echo "API_DB_CONNECTION_STRING=${{ secrets.API_DB_CONNECTION_STRING }}" >> .env

    - name: Install Gitleaks
      run: |
        curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/gitleaks
      
    - name: Run Gitleaks Scan and Display Results
      run: |
        ./gitleaks detect --source . --no-git --report-format json --report-path gitleaks-report.json || true
        echo "================= Gitleaks Report ================="
        cat gitleaks-report.json | jq .
        echo "==================================================="

    - name: Install Trivy for vulnerability scanning
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y

    - name: Run Trivy vulnerability scan on Docker images
      run: |
        trivy image mcr.microsoft.com/mssql/server:2022-latest
        trivy image mcr.microsoft.com/mssql-tools
        trivy image dockercompose-api || true
        trivy image dockercompose-client || true

    - name: Install Hadolint for Dockerfile linting
      run: |
        sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        sudo chmod +x /bin/hadolint

    - name: Lint API Dockerfile
      run: hadolint ./API/Dockerfile

    - name: Lint Client Dockerfile
      run: hadolint ./Client/Dockerfile

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore API Dependencies
      working-directory: ./API
      run: dotnet restore

    - name: Restore Client Dependencies
      working-directory: ./Client
      run: dotnet restore

    - name: .NET Build (API and Client)
      run: |
        dotnet build ./API --no-restore --configuration Release
        dotnet build ./Client --no-restore --configuration Release

    - name: Run .NET Static Analysis (API)
      working-directory: ./API
      run: dotnet format --verify-no-changes --severity error

    - name: Run .NET Static Analysis (Client)
      working-directory: ./Client
      run: dotnet format --verify-no-changes --severity error

    - name: Run .NET Dependency Vulnerability Scans (API)
      working-directory: ./API
      run: dotnet list package --vulnerable

    - name: Run .NET Dependency Vulnerability Scans (Client)
      working-directory: ./Client
      run: dotnet list package --vulnerable

    - name: Run Docker Compose
      run: docker-compose -f docker-compose.yml up --build --abort-on-container-exit

    - name: Shut down Docker Compose
      if: always()
      run: docker-compose -f docker-compose.yml down -v